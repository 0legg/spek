if (hasProperty('teamcity') && teamcity_branch_name == "master") {
    println "Teamcity master branch"
    version = '0.1-SNAPSHOT'
} else {
    version = teamcity["build.number"]
}

String getKotlinVer() {
    println "This shit works"
    if (hasProperty("teamcity") && teamcity_branch_name == "master") {
        return '0.1-SNAPSHOT'
    } else {
        return '0.6.1673'
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVer}"
    }
}

group = 'org.spek'

apply plugin: 'kotlin'


allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'idea'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

subprojects {
    buildscript {

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVer}"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
   
    configurations {
        include_unpacked_jars /// used when packing 'spek.jar' for download
    }

    def junitDependency = "junit:junit:${junitVersion}"

    dependencies {
        println "Building stdlib with version " + kotlinVer
        compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVer}"
        compile "org.jetbrains.kotlin:kotlin-runtime:${kotlinVer}"
        compile junitDependency
        include_unpacked_jars junitDependency
    }


    tasks.withType(Jar) { task ->
       task.manifest {
          attributes \
            'Implementation-Title': "Spek", \
            'Implementation-Version': rootProject.version, \
            'Implementation-Kotlin-Version': kotlinVer, \
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
          }
    }

    test {

       // set heap size for the test JVM(s)
       minHeapSize = "128m"
       maxHeapSize = "512m"

       // set JVM arguments for the test JVM(s)
       jvmArgs '-XX:MaxPermSize=256m'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = 1.11

    doLast() {
      def gradleOpts = "-XX:MaxPermSize=300m -Xmx1024m"
      def gradlew_sh = file("gradlew")
      def gradlew_bat = file("gradlew.bat")
      gradlew_sh.text = gradlew_sh.text.replace("DEFAULT_JVM_OPTS=",
                                                "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
      gradlew_bat.text = gradlew_bat.text.replace("set DEFAULT_JVM_OPTS=",
                                                  "set GRADLE_OPTS=$gradleOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")

    }

}
