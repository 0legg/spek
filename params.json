{"name":"Spek","tagline":"A Specification Framework","body":"# Spek\r\n\r\nA Specification framework for Kotlin\r\n\r\n## License\r\n\r\nLicensed under Modified BSD (See LICENSE.TXT) for full license\r\n\r\n## Usage\r\n\r\n\r\nSpek is a specification framework for Kotlin, allowing you to define your specifications\r\nin a fluent and easy to read way.\r\n\r\n## Download\r\n\r\nGet artifacts from [last successful build](http://teamcity.jetbrains.com/viewLog.html?buildTypeId=Spek_BuildAndTests&buildId=lastSuccessful&buildBranch=%3Cdefault%3E&tab=artifacts)\r\n\r\n### Writing specifications\r\n\r\nA specification is a class that is inherited either from `Spek`:\r\n\r\n```kotlin\r\npublic class calculatorSpecs : Spek() {{\r\n    given(\"a calculator\")\r\n    {\r\n        val calculator = Calculator()\r\n\r\n        on(\"calling sum with two numbers\")\r\n        {\r\n            val sum = calculator.sum(2, 4)\r\n\r\n            it(\"should return the result of adding the first number to the second number\")\r\n            {\r\n                shouldEqual(6, sum)\r\n            }\r\n        }\r\n    }\r\n}}\r\n```\r\n\r\n### Runners\r\n\r\nYou may write tests with Spek either for provided standalone console runner, or\r\nas JUnit tests. JUnit tests are run under standard JUnit 4.x tests runner.\r\n\r\n## FAQ\r\n\r\n**Q: What is Kotlin?**\r\n<br/>[Kotlin](http://kotlin.jetbrains.org) is an Apache 2 OSS Language targetted at the JVM and JavaScript and is developed by [JetBrains](http://www.jetbrains.com)\r\nIt is aimed at being a concise modern language for general use. It also rocks!\r\n\r\n**Q: Is Kotlin free to use?**\r\n<br/>While this is not a Kotlin FAQ, it is important to note that Kotlin is free to use and you can use the command line or the Community Edition\r\nof IntelliJ to develop with it (which is free and OSS). Obviously IntelliJ Ultimate also works!\r\nThere's also an Eclipse plugin in the works. Check the project site for updates.\r\n\r\n\r\n**Q: Is Spek a BDD or a TDD framework?**\r\n<br/>Spek in Dutch means Bacon, so you could think of it as a Bacon Driven Development framework. Being serious for a\r\nmoment though, we (at least the original author) believe that there is a false distinction in frameworks around what TDD\r\nor BDD is. Unit tests are ultimately about defining the specifications of your system. As such, Spek is merely a specification\r\nframework if it can be called anything. For more information read [What BDD has taught me](http://hadihariri.com/2012/04/11/what-bdd-has-taught-me/)\r\n\r\n**Q: Can I have more than one _on_ per _given_?**\r\n<br/>Yes you can. How you group your specifications is up to you\r\n\r\n**Q: Can I have more than one _it_ per _on_?**\r\n<br/>Yes you can. In real world applications, an action can lead to several reactions.\r\n\r\n**Q: Isn't it bad to have more than one assertion per test?**\r\n<br/>Traditionally, in unit testing it's been recommended that you should limit each test to one assertion with the\r\nidea that you test a single *unit*, and at the same time, find it easy to see where a test has failed. In Spek you can still\r\ncomply with this guidance. You can have multiple *it* but you limit each to one assertion.\r\n\r\n**Q: Why is the logo a piece of bacon?**\r\n<br/>We don't have a logo, but if you want to make one, let it be Bacon. English bacon that is. Spek was originally codenamed kspec. Someone suggested to rename it to Spek which kind of fits. Turns out, Spek is Bacon in\r\nDutch. So why not have bacon as a logo? After all, we love bacon!\r\n\r\n**Q: Can I contribute?**\r\n<br/>Please do!\r\n\r\n","google":"UA-381926-1","note":"Don't delete this file! It's used internally to help with page regeneration."}